/* jshint node: true */
'use strict';

/*
This file was generated by generator-ffwd,
you probably should not modify it
*/

var fs = require('fs');
var utils = require('ffwd-utils/server');
var _ = utils._;
var debug = utils.debug('ffwd-auth');
var marked = require('marked');
var yfm = require('yfm');
var hljs = require('highlight.js');

// Synchronous highlighting with highlight.js
marked.setOptions({
  highlight: function (code) {
    return hljs.highlightAuto(code).value;
  }
});

/**
 * An example of feature implementation
 * @exports example-feature
 * @memberOf FFWD.server
 * @param  {Object} config ...
 * @return {Object}        ...
 */
module.exports = function(config) {
  config = config || {};
  var app = config.app;
  config.pages = config.pages || 'pages';
  config.navigation = config.navigation || {};
  var ymlFileExp = /\.(yml|yaml)$/i;
  var _navCache;


  // stoopid
  config.navigation = config.pages +'/navigation.yml';

  config.cache = typeof config.cache !== 'undefined' ? config.cache : (config.environment !== 'dev');



  /**
   * Builds the navigation for a response.
   * @param  {connect.Request}  req  ...
   * @param  {connect.Response} res  ...
   * @param  {Function} next         ...
   */
  function navigationPopulate(req, res, next) {
    if (!_navCache || config.cache === false) {
      try {
        // assume that a string is a file path
        if (_.isString(config.navigation)) {
          // handle yaml
          if (ymlFileExp.test(config.navigation)) {
            _navCache = yfm.read(config.navigation, {delims: ['---', '---']}).context;
          }
          // handle js, node and json
          else {
            _navCache = require(config.navigation);
          }
        }
        // handle the possiblity of using a function a function
        else {
          _navCache = _.result(config, 'navigation');
        }
      }
      catch (err) {
        return next(err);
      }

      utils.glob.sync(config.pages +'/**/*.{html,md}');
    }
    res.locals.navigation = _navCache;
    next();
  }

  function pageEditRender(req, res, next) {
    fs.readFile(app.get('views') +'/partials/page-edit.tpl', {
      encoding: 'utf8'
    }, function(nope, str) {
      if (nope) { return next(nope); }
      res.locals.page.body = _.template(str, res.locals);
      res.locals.page.title = 'Edit: '+ res.locals.page.title;
      next();
    });
  }

  function docFilepath(req, next) {
    var name = req.url.split('?').shift().slice(1);
    name = name || 'index';
    utils.glob(config.pages +'/'+ name +'.{md,html}', function(err, files) {
      if (err) { return next(err); }
      next(null, files.shift());
      // var filename = files.shift();
      // fs.exists(filename, function(yep) {
      //   next(!yep, filename);
      // });
    });
  }

  /**
   * Reponse callback for /docs requests
   * @param  {connect.Request}   req  ...
   * @param  {connect.Response}   res  ...
   * @param  {Function} next ...
   */
  function docRequest(req, res, next) {
    debug('docRequest has request user?', req.user);
    debug('docRequest has request session.passport?', req.session.passport);
    if (!_.isUndefined(req.query.edit)) {
      return docEditRequest(req, res, next);
    }

    docFilepath(req, function(nope, filename) {
      if (nope) { return next(); }
      var content = yfm.read(filename);

      _.extend(res.locals.page, content.context);

      res.locals.page.body = marked.parse(content.content);
      res.locals.page.header = res.renderPartial('page-header');
      res.locals.page.footer = res.renderPartial('page-footer');

      res.render('default');
    });
  }

  function docEditRequest(req, res, next) {
    debug('docEditRequest has request user?', req.user);
    debug('docEditRequest has request session.passport?', req.session.passport);
    debug('docEditRequest req.query.edit? %s', req.query.edit);

    if (_.isUndefined(req.query.edit)) {
      return next();
    }

    docFilepath(req, function(err, filename) {
      if (err) { return next(err); }
      var content = yfm.read(filename);

      _.extend(res.locals.page, content.context);

      res.locals.page.vars = Object.keys(content.context);

      res.locals.page.body = content.content;
      res.locals.page.header = res.renderPartial('page-header');
      res.locals.page.footer = res.renderPartial('page-footer');

      pageEditRender(req, res, function(err) {
        if (err) { return next(err); }
        res.render('default');
      });
    });
  }

  function docCreateRequest(req, res, next) {
    debug('docCreateRequest has request session.passport?', req.session.passport);

    var content = {
      context: _.clone(req.query),
      content: req.query.body || ''
    };

    delete content.context.body;

    _.extend(res.locals.page, content.context);

    res.locals.page.vars = Object.keys(content.context);

    res.locals.page.body = content.content;
    res.locals.page.header = res.renderPartial('page-header');
    res.locals.page.footer = res.renderPartial('page-footer');

    pageEditRender(req, res, function(err) {
      if (err) { return next(err); }
      res.render('default');
    });
  }

  app.use(navigationPopulate);

  app.use('/'+ config.pages, function(req, res, next) {
    var method = req.method.toLowerCase();

    if (method === 'post') {

    }
    else if (method === 'get') {
      return docRequest(req, res, next);
    }
    else if (method === 'put') {

    }
    else if (method === 'delete') {

    }

    next(new Error('Unsupported method '+ method));
  });

  return {
    navigationPopulate: navigationPopulate,

    docRequest: docRequest,

    docEditRequest: docEditRequest,

    docCreateRequest: docCreateRequest,

    pageEditRender: pageEditRender
  };
};
